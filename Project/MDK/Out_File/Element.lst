C251 COMPILER V5.60.0,  Element                                                            27/03/24  17:05:19  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Element
OBJECT MODULE PLACED IN .\Out_File\Element.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\CODE\Element.c XSMALL INTR2 WARNINGLEVEL(3) BR
                    -OWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\
                    -USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\Element.lst) OBJECT(.\Out_File\Element.obj) 

stmt  level    source

    1          #include "isr.h"
    2          #include <string.h>
    3          #include <stdio.h>
    4          #include "common.h"
    5          #include "Element.h"
    6          #include "Motor.h"
    7          #include "PID.h"
    8          #include "Buzzer.h"
    9          #include "MPU6050.h"
   10          #include "ADC.h"
   11          
   12          extern float Exp_Speed;
   13          extern float ADC_proc[5];
   14          
   15          //上下坡标志位
   16          char Up_Down_Flag = 0;
   17          float Circle_Delay1 = 0;        
   18          char Circle_Delay2 = 0;
   19          
   20          //环岛标志位
   21          float Circle_Flag1 = 0;  // 左右环岛标志位
   22          char Circle_Flag2 = 0;
   23          char Circle_Flag3 = 0; 
   24          
   25          
   26          
   27          void Elem_Up_Down(float Angle,float Gyro)  //上下坡
   28          {
   29   1      
   30   1              if(Angle > -4 && Gyro < -400)
   31   1                      Exp_Speed = 380;
   32   1              else if(Angle < -18)
   33   1                      Exp_Speed = 30;
   34   1      }
   35          
   36          
   37          
   38          
   39          //障碍物识别
   40          char Barrier_Flag1=0;
   41          char Barrier_Flag2=0;
   42          char Barrier_Flag3=0;
   43          char Barrier_Executed = 0;
   44          char Barrier_Delay = 0;
   45          char Avoid_ON = 0;
   46          float Sum_Angle=0;
   47          
   48          void Elem_Barrier(float Gyro_Z)
   49          {
   50   1              Gyro_Z = (Gyro_Z*2000)/32768;   
   51   1              #if BARRIER_DIR == 0                                            //向右避障
   52   1                      if(Barrier_Flag1==1)                                    //识别到障碍物
   53   1                      {
   54   2                              if(Sum_Angle > -20)                             //右拐避障
   55   2                              {
   56   3                                      Ratio = -0.40;  
   57   3                                      Sum_Angle += Gyro_Z*0.005;              //角度积分
C251 COMPILER V5.60.0,  Element                                                            27/03/24  17:05:19  PAGE 2   

   58   3                              }
   59   2                              else
   60   2                              {
   61   3                                      Barrier_Flag2 = 1;                              //右转足够      
   62   3                                      Sum_Angle = 0;                                  //清零
   63   3                              }
   64   2      
   65   2                              if(Barrier_Flag2==1)    
   66   2                              {
   67   3                                      Ratio = 0.42;                                   //开始左拐
   68   3                                      Sum_Angle += Gyro_Z*0.005;      
   69   3                                      if(Sum_Angle > 22)                      //左拐回正
   70   3                                              Barrier_Flag3 = 1;              //回正标志位            
   71   3                              }       
   72   2                              if(Barrier_Flag3 == 1)                          //回正后标志位清零
   73   2                              {       
   74   3                                      Barrier_Executed = 1;
   75   3                                      Barrier_Flag1 = 0;
   76   3                                      Barrier_Flag2 = 0;
   77   3                                      Sum_Angle = 0;
   78   3                                      Barrier_Flag3 = 0;
   79   3                                      Barrier_Delay = 30;
   80   3                              }       
   81   2                      }
   82   1                      else
   83   1                      {
   84   2                              Barrier_Flag1 = 0;
   85   2                              Barrier_Flag2 = 0;
   86   2                              Barrier_Flag3 = 0;
   87   2                              Sum_Angle = 0;
   88   2                      }
   89   1                      
   90   1              #elif BARRIER_DIR == 1  //向左避障      
                               
                               if(Barrier_Flag1==1)                                    //识别到障碍物
                               {
                                       if(Sum_Angle < 20)                              //左拐避障
                                       {
                                               Ratio = 0.4;    
                                               Sum_Angle += Gyro_Z*0.005;              //角度积分
                                       }
                                       else
                                       {
                                               Barrier_Flag2 = 1;                              //角度积分      
                                               Sum_Angle = 0;                                  //清零
                                       }
               
                                       if(Barrier_Flag2==1)                            //左拐角度足够
                                       {
                                               Ratio = -0.42;                                  //开始右拐
                                               Sum_Angle += Gyro_Z*0.005;      
                                               if(Sum_Angle < -22)                     //右拐回正
                                                       Barrier_Flag3 = 1;              //回正标志位            
                                       }       
                                       if(Barrier_Flag3==1)                            //回正后标志位清零
                                       {       
                                               Barrier_Executed = 1;
                                               Barrier_Flag1 = 0;
                                               Barrier_Flag2 = 0;
                                               Sum_Angle = 0;
                                               Barrier_Delay = 30;
                                               Barrier_Flag3 = 0;
               
                                       }
                               }
                               else
C251 COMPILER V5.60.0,  Element                                                            27/03/24  17:05:19  PAGE 3   

                               {
                                       Barrier_Flag1 = 0;
                                       Barrier_Flag2 = 0;
                                       Barrier_Flag3 = 0;
                                       Sum_Angle = 0;
                               }
                               
                       #endif                  
  132   1      }
  133          
  134          
  135          //float Sum_Dis1 = 0;
  136          //float Sum_Dis2 = 0;
  137          //float Sum_Angle_C1 = 0;
  138          void Elem_Circle(float Speed,float Gyro_Z)
  139          {
  140   1              static float Sum_Dis1 = 0;
  141   1              static float Sum_Dis2 = 0;
  142   1              static float Sum_Angle_C1 = 0;
  143   1              static float Circle_Delay2 = 0;                 //出环延时
  144   1              
  145   1              if(Circle_Delay2 > 0)                                   //出环，清除标志位
  146   1              {
  147   2                      Circle_Flag1 = 0;
  148   2                      Circle_Flag2 = 0;
  149   2                      if(Circle_Flag3 == LEFT_CIRCLE)         //用来记录出环时的方向
  150   2                              Ratio -=0.2;
  151   2                      else if(Circle_Flag3 == RIGHT_CIRCLE)
  152   2                              Ratio +=0.2;
  153   2                      Circle_Delay2--;
  154   2                      return ;                                                //发生误判，退出函数
  155   2              }
  156   1      
  157   1              
  158   1              if(Circle_Flag1 == 1)                                           //识别到环岛
  159   1              {
  160   2                      //x10_ms = 13;
  161   2                      Gyro_Z = (Gyro_Z*2000)/32768;
  162   2                      if(Sum_Dis1 > DIS_ROUND_IN)                     //路程积分，积满进环
  163   2                      {
  164   3                              Sum_Angle_C1 += Gyro_Z*0.005;
  165   3                              if(Circle_Flag2 == 0 && (ADC_proc[0]+ADC_proc[1] > ADC_proc[3]+ADC_proc[4]))            //标志位未清零时只置位一
             -次
  166   3                                      Circle_Flag2 = LEFT_CIRCLE;
  167   3                              else if(Circle_Flag2 == 0 && (ADC_proc[0]+ADC_proc[1] < ADC_proc[3]+ADC_proc[4]))
  168   3                                      Circle_Flag2 = RIGHT_CIRCLE;
  169   3                              
  170   3                              Circle_Flag3 = Circle_Flag2;                                                                                                            //变量记录方向
  171   3                              
  172   3                              if(Sum_Angle_C1 < 35  && Circle_Flag2 == LEFT_CIRCLE)                                                           //角度积满，入环成功，正常循迹
  173   3                                      Ratio = 0.62;
  174   3                              if(Sum_Angle_C1 > -35 && Circle_Flag2 == RIGHT_CIRCLE)
  175   3                                      Ratio = -0.62;
  176   3                      }
  177   2                      else
  178   2                              Sum_Dis1+=Speed;
  179   2                      
  180   2                      if(Sum_Angle_C1 > ROUND_L || Sum_Angle_C1 < ROUND_R )                                                                   //出环条件之一，角度积分够大
  181   2                      {
  182   3                              if(ADC_proc[2] > 63 || ADC_proc[0] > 63 || ADC_proc[4] > 63)                                            //预出环 防止误判再次入环
  183   3                              {
  184   4                                      Sum_Dis2 += Speed;
  185   4                                      if(Sum_Dis2 > DIS_ROUND_OUT)                                                                                                    //路程积满出环
  186   4                                      {
  187   5                                              Sum_Dis1 = 0;
  188   5                                              Sum_Dis2 = 0;
C251 COMPILER V5.60.0,  Element                                                            27/03/24  17:05:19  PAGE 4   

  189   5                                              Sum_Angle_C1 = 0;
  190   5                                              Circle_Flag1 = 0;
  191   5                                              Circle_Flag2 = 0;
  192   5                                      }
  193   4                                      Circle_Delay2 = 120;   //延时800ms
  194   4                              }
  195   3                      }
  196   2              }
  197   1              else
  198   1              {
  199   2                      Sum_Dis1 = 0;
  200   2                      Sum_Dis2 = 0;
  201   2                      Sum_Angle_C1 = 0;
  202   2                      Circle_Flag2 = 0;
  203   2              }
  204   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       781     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        38     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       106     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
