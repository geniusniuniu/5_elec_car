C251 COMPILER V5.60.0,  Element                                                            15/03/24  07:44:02  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Element
OBJECT MODULE PLACED IN .\Out_File\Element.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\CODE\Element.c XSMALL INTR2 WARNINGLEVEL(3) BR
                    -OWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\
                    -USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\Element.lst) OBJECT(.\Out_File\Element.obj) 

stmt  level    source

    1          #include "isr.h"
    2          #include <string.h>
    3          #include <stdio.h>
    4          #include "common.h"
    5          #include "Element.h"
    6          #include "Motor.h"
    7          #include "PID.h"
    8          #include "Buzzer.h"
    9          #include "MPU6050.h"
   10          
   11          extern float Exp_Speed;
   12          extern float Ratio;
   13          extern float ADC_proc[5];
   14          
   15          //上下坡标志位
   16          char Up_Down_Flag = 0;
   17          char delay_10ms = 0;
   18          
   19          //环岛标志位
   20          char circle_flag_L = 0;  // 左右环岛识别建立不同标志位
   21          char circle_flag_R = 0;
   22          char circle_In_Flag = 0;
   23          char circle_Out_Flag = 0;
   24          char circle_Force_Flag = 0;  //强迫出环标志位
   25          
   26          //避障相关标志位
   27          char Barrier_Flag1=0;
   28          char Barrier_Flag2=0;
   29          char Barrier_Flag3=0;
   30          char Barrier_Executed = 0;
   31          char Barrier_Flag4=0;
   32          char Avoid_ON = 0;
   33          float Sum_Angle=0;
   34          
   35          
   36          void Elem_Up_Down(float Angle,float Gyro)  //上下坡
   37          {
   38   1      
   39   1              if(Angle > -4 && Gyro < -400)
   40   1                      Exp_Speed = 310;
   41   1              else if(Angle < -18)
   42   1                      Exp_Speed = 30;
   43   1      }
   44          
   45          
   46          //障碍物识别     
   47          void Elem_Barrier(float Gyro_Z)
   48          {
   49   1              #if BARRIER_DIR == 0
                               //向右避障
                               Gyro_Z = (Gyro_Z*2000)/32768;   
                               if(Barrier_Flag1==1)
                               {
                                       Ratio = -0.48 ;                 //直接更改期望值
                                       Sum_Angle += Gyro_Z*0.005;
                                       
                               }
C251 COMPILER V5.60.0,  Element                                                            15/03/24  07:44:02  PAGE 2   

                               if(Sum_Angle < -20)     //右拐避障
                               {
                                       Ratio = -0.01;
                                       Barrier_Flag1 = 0;   //出赛道角度停止积分
                                       Barrier_Flag2 = 1;
                                       Sum_Angle = 0;          //积分清零
                               }
                               if(Barrier_Flag2==1)
                               {
                                       Sum_Angle += Gyro_Z*0.005;   
                                       if(Sum_Angle < 22)  //左拐回正
                                       {
                                               Ratio = 0.48;           
                                       }
                                       else
                                               Barrier_Flag3 = 1;  //回正
                               }
                               
                               if(Barrier_Flag3==1)            //回正后标志位清零
                               {       
                                       Barrier_Flag1 = 0;
                                       Barrier_Flag2 = 0;
                                       Barrier_Flag3 = 0;
                                       Sum_Angle = 0;
                                       Barrier_Executed = 1;
                                       Avoid_ON = 0;
                               }
                       //      #if TRACE_METHOD2
                       //              Barrier_Flag4 == 30;
                       //      #endif
                       #elif BARRIER_DIR == 1  //向左避障
   89   1                      Gyro_Z = (Gyro_Z*2000)/32768;   
   90   1                      if(Barrier_Flag1==1)
   91   1                      {
   92   2                              Ratio = 0.48 ;                  //直接更改期望值
   93   2                              Sum_Angle += Gyro_Z*0.005;
   94   2                              
   95   2                      }
   96   1                      if(Sum_Angle > 20)      //左拐避障
   97   1                      {
   98   2                              Ratio = 0.01;
   99   2                              Barrier_Flag1 = 0;   //出赛道角度停止积分
  100   2                              Barrier_Flag2 = 1;
  101   2                              Sum_Angle = 0;          //积分清零
  102   2                      }
  103   1                      if(Barrier_Flag2==1)
  104   1                      {
  105   2                              Sum_Angle += Gyro_Z*0.005;   
  106   2                              if(Sum_Angle < -22)  //右拐回正
  107   2      
  108   2                                      Ratio = -0.48;          
  109   2                              else
  110   2                                      Barrier_Flag3 = 1;  //回正
  111   2                      }
  112   1                      
  113   1                      if(Barrier_Flag3==1)            //回正后标志位清零
  114   1                      {       
  115   2                              Barrier_Flag1 = 0;
  116   2                              Barrier_Flag2 = 0;
  117   2                              Barrier_Flag3 = 0;
  118   2                              Sum_Angle = 0;
  119   2                              Barrier_Executed = 1;
  120   2                              Avoid_ON = 0;
  121   2                      }
  122   1              #endif                          
  123   1      }
C251 COMPILER V5.60.0,  Element                                                            15/03/24  07:44:02  PAGE 3   

  124          
  125          
  126          
  127          //进行左环岛识别并进出左环岛
  128          void Elem_Circle_L(float Speed,float Gyro_Z)
  129          {
  130   1              static float Sum_Dis1 = 0;
  131   1              static float Sum_Dis2 = 0;
  132   1              static float Sum_Angle_C1 = 0;
  133   1              if(circle_flag_L == 1)  //识别圆环标志位
  134   1              {       
  135   2                      Gyro_Z = (Gyro_Z*2000)/32768;
  136   2                      if(Sum_Dis2>3500)
  137   2                      {
  138   3                              Sum_Angle_C1 += Gyro_Z*0.005;
  139   3                              if(Sum_Angle_C1 < 60)
  140   3                              {
  141   4                                      Ratio = 0.52;
  142   4                              }
  143   3                      }
  144   2                      else
  145   2                      {
  146   3                              Sum_Dis2+=Speed;
  147   3                      }
  148   2                      if(Sum_Angle_C1 > ROUND_L)
  149   2                      {
  150   3                              Sum_Dis1+=Speed;
  151   3                              if(Sum_Dis1 > 8000 && Sum_Dis1 <= 12000)                
  152   3                                      Ratio = -0.12;
  153   3                              else if(Sum_Dis1 > 12000)
  154   3                              {
  155   4      //                              x10_ms = 13;
  156   4                                      Sum_Dis1=0;
  157   4                                      Sum_Dis2=0;
  158   4                                      Sum_Angle_C1=0;
  159   4                                      circle_flag_L=0;
  160   4                              }
  161   3                      }
  162   2                      
  163   2                                      //实验室右环岛是最后一个特殊元素
  164   2                                      //如果有多个重复元素，再置一个记数标志位
  165   2                                      //Element_Num 
  166   2                                      //if(Element_Num == x) //重复元素全部走完
  167   2      //                              Avoid_ON == 1   
  168   2                      
  169   2      //如果误入环岛，也需要正常出去  **************************************************************************
             -*/
  170   2              }
  171   1      }
  172          
  173          
  174          
  175          float Sum_Dis1 = 0;
  176          float Sum_Dis2 = 0;
  177          float Sum_Angle_C1 = 0;
  178          //进行右环岛识别并进出右环岛
  179          void Elem_Circle_R(float Speed,float Gyro_Z)
  180          {
  181   1      //      static float Sum_Dis1 = 0;
  182   1      //      static float Sum_Dis2 = 0;
  183   1      //      static float Sum_Angle_C1 = 0;
  184   1              if(circle_flag_R == 1)  //识别圆环标志位
  185   1              {       
  186   2                      Gyro_Z = (Gyro_Z*2000)/32768;
  187   2                      if(Sum_Dis2>3500)
  188   2                      {
C251 COMPILER V5.60.0,  Element                                                            15/03/24  07:44:02  PAGE 4   

  189   3                              Sum_Angle_C1 += Gyro_Z*0.005;
  190   3                              if(Sum_Angle_C1 > -40)
  191   3                              {
  192   4                                      Ratio = -0.47;
  193   4                              }
  194   3                      }
  195   2                      else
  196   2                              Sum_Dis2 += Speed;
  197   2                      if(Sum_Angle_C1 < ROUND_R)   //预出环
  198   2                      {
  199   3                              Sum_Dis1 += Speed;
  200   3                              if(Sum_Dis1 > 3500 && Sum_Dis1 <= 8000)
  201   3                                      Ratio = -0.2;
  202   3                              else if(Sum_Dis1 > 8000 && Sum_Dis1 <= 12500)           
  203   3                                      Ratio = 0.09;
  204   3                              else if(Sum_Dis1 > 12500)
  205   3                              {
  206   4                                      Sum_Dis1=0;
  207   4                                      Sum_Dis2=0;
  208   4                                      Sum_Angle_C1=0;
  209   4                                      circle_flag_R=0;
  210   4                              }
  211   3                      }
  212   2              }
  213   1      }
  214          
  215          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       763     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        41     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       121     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
