C251 COMPILER V5.60.0,  Element                                                            25/03/24  20:40:06  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Element
OBJECT MODULE PLACED IN .\Out_File\Element.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\CODE\Element.c XSMALL INTR2 WARNINGLEVEL(3) BR
                    -OWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\
                    -USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\Element.lst) OBJECT(.\Out_File\Element.obj) 

stmt  level    source

    1          #include "isr.h"
    2          #include <string.h>
    3          #include <stdio.h>
    4          #include "common.h"
    5          #include "Element.h"
    6          #include "Motor.h"
    7          #include "PID.h"
    8          #include "Buzzer.h"
    9          #include "MPU6050.h"
   10          
   11          extern float Exp_Speed;
   12          extern float Ratio;
   13          extern float ADC_proc[5];
   14          
   15          //上下坡标志位
   16          char Up_Down_Flag = 0;
   17          char Circle_Delay2 = 0;
   18          
   19          //环岛标志位
   20          char Circle_Flag1 = 0;  // 左右环岛标志位
   21          char Circle_Flag2 = 0;
   22          char Circle_Flag3 = 0; 
   23          
   24          
   25          
   26          void Elem_Up_Down(float Angle,float Gyro)  //上下坡
   27          {
   28   1      
   29   1              if(Angle > -4 && Gyro < -400)
   30   1                      Exp_Speed = 380;
   31   1              else if(Angle < -18)
   32   1                      Exp_Speed = 30;
   33   1      }
   34          
   35          
   36          
   37          
   38          //障碍物识别
   39          char Barrier_Flag1=0;
   40          char Barrier_Flag2=0;
   41          char Barrier_Flag3=0;
   42          char Barrier_Executed = 0;
   43          char Barrier_Delay = 0;
   44          char Avoid_ON = 0;
   45          float Sum_Angle=0;
   46          
   47          void Elem_Barrier(float Gyro_Z)
   48          {
   49   1              Gyro_Z = (Gyro_Z*2000)/32768;   
   50   1              #if BARRIER_DIR == 0            //向右避障
   51   1                      if(Barrier_Flag1==1)
   52   1                      {
   53   2                              Ratio = -0.48 ;                 //直接更改期望值
   54   2                              Sum_Angle += Gyro_Z*0.005;      
   55   2                      }
   56   1                      if(Sum_Angle < -20)             //右拐避障
   57   1                      {
C251 COMPILER V5.60.0,  Element                                                            25/03/24  20:40:06  PAGE 2   

   58   2                              Barrier_Flag1 = 0;      //出赛道角度停止积分
   59   2                              Barrier_Flag2 = 1;
   60   2                              Sum_Angle = 0;                  //积分清零
   61   2                      }
   62   1                      if(Barrier_Flag2==1)
   63   1                      {
   64   2                              Sum_Angle += Gyro_Z*0.005;   
   65   2                              if(Sum_Angle < 24)      //左拐回正
   66   2                                      Ratio = 0.42;           
   67   2                              else
   68   2                                      Barrier_Flag3 = 1;  //回正标志位
   69   2                      }
   70   1                      
   71   1                      if(Barrier_Flag3==1)            //回正后标志位清零
   72   1                      {       
   73   2                              Barrier_Flag1 = 0;
   74   2                              Barrier_Flag2 = 0;
   75   2                              Barrier_Flag3 = 0;
   76   2                              Sum_Angle = 0;
   77   2                              Barrier_Executed = 1;
   78   2                              Avoid_ON = 0;
   79   2                              #if TRACE_METHOD2
   80   2                                      Barrier_Delay = 30;
   81   2                              #endif
   82   2                      }
   83   1                      
   84   1                      
   85   1              #elif BARRIER_DIR == 1  //向左避障      
                               if(Barrier_Flag1==1)
                               {
                                       Ratio = 0.48;                   //直接更改期望值
                                       Sum_Angle += Gyro_Z*0.005;
                                       
                               }
                               if(Sum_Angle > 20)      //左拐避障
                               {
                                       Barrier_Flag1 = 0;   //出赛道角度停止积分
                                       Barrier_Flag2 = 1;
                                       Sum_Angle = 0;          //积分清零
                               }
                               if(Barrier_Flag2==1)
                               {
                                       Sum_Angle += Gyro_Z*0.005;   
                                       if(Sum_Angle < -25)  //右拐回正
               
                                               Ratio = -0.48;          
                                       else
                                               Barrier_Flag3 = 1;  //回正
                               }
                               
                               if(Barrier_Flag3==1)            //回正后标志位清零
                               {       
                                       Barrier_Flag1 = 0;
                                       Barrier_Flag2 = 0;
                                       Barrier_Flag3 = 0;
                                       Sum_Angle = 0;
                                       Barrier_Executed = 1;
                                       Avoid_ON = 0;
                                       #if TRACE_METHOD2
                                               Barrier_Delay = 30;
                                       #endif
                               }
               
                       #endif                  
  122   1      }
  123          
C251 COMPILER V5.60.0,  Element                                                            25/03/24  20:40:06  PAGE 3   

  124          
  125          float Sum_Dis1 = 0;
  126          float Sum_Dis2 = 0;
  127          float Sum_Angle_C1 = 0;
  128          void Elem_Circle(float Speed,float Gyro_Z)
  129          {
  130   1      //      static float Sum_Dis1 = 0;
  131   1      //      static float Sum_Dis2 = 0;
  132   1      //      static float Sum_Angle_C1 = 0;
  133   1              static float Circle_Delay2 = 0;                 //出环延时
  134   1              
  135   1              if(Circle_Delay2 > 0)                                   //出环，清除标志位
  136   1              {
  137   2                      Circle_Flag1 = 0;
  138   2                      Circle_Flag2 = 0;
  139   2                      if(Circle_Flag3 == LEFT_CIRCLE)         //用来记录出环时的方向
  140   2                              Ratio -=0.2;
  141   2                      else if(Circle_Flag3 == RIGHT_CIRCLE)
  142   2                              Ratio +=0.2;
  143   2                      Circle_Delay2--;
  144   2                      return ;                                                //发生误判，退出函数
  145   2              }
  146   1      
  147   1              
  148   1              if(Circle_Flag1)                                                //识别到环岛
  149   1              {
  150   2                      Gyro_Z = (Gyro_Z*2000)/32768;
  151   2                      if(Sum_Dis1 > DIS_ROUND_IN)                     //路程积分，积满进环
  152   2                      {
  153   3                              Sum_Angle_C1 += Gyro_Z*0.005;
  154   3                              if(Circle_Flag2 == 0 && (ADC_proc[0]+ADC_proc[1] > ADC_proc[3]+ADC_proc[4]))            //标志位未清零时只置位一
             -次
  155   3                                      Circle_Flag2 = LEFT_CIRCLE;
  156   3                              else if(Circle_Flag2 == 0 && (ADC_proc[0]+ADC_proc[1] < ADC_proc[3]+ADC_proc[4]))
  157   3                                      Circle_Flag2 = RIGHT_CIRCLE;
  158   3                              
  159   3                              Circle_Flag3 = Circle_Flag2;                                                                                                            //变量记录方向
  160   3                              
  161   3                              if(Sum_Angle_C1 < 35  && Circle_Flag2 == LEFT_CIRCLE)                                                           //角度积满，入环成功，正常循迹
  162   3                                      Ratio = 0.52;
  163   3                              if(Sum_Angle_C1 > -35 && Circle_Flag2 == RIGHT_CIRCLE)
  164   3                                      Ratio = -0.52;
  165   3                      }
  166   2                      else
  167   2                              Sum_Dis1+=Speed;
  168   2                      
  169   2                      if(Sum_Angle_C1 > ROUND_L || Sum_Angle_C1 < ROUND_R )                                                                   //出环条件之一，角度积分够大
  170   2                      {
  171   3                              if(ADC_proc[2] > 64 || ADC_proc[0] > 59 || ADC_proc[4] > 59)                                            //预出环 防止误判再次入环
  172   3                              {
  173   4                                      Sum_Dis2 += Speed;
  174   4                                      if(Sum_Dis2 > DIS_ROUND_OUT)                                                                                                    //路程积满出环
  175   4                                      {
  176   5                                              Sum_Dis1 = 0;
  177   5                                              Sum_Dis2 = 0;
  178   5                                              Sum_Angle_C1 = 0;
  179   5                                              Circle_Flag1 = 0;
  180   5                                              Circle_Flag2 = 0;
  181   5                                      }
  182   4                                      Circle_Delay2 = 80;   //延时800ms
  183   4                              }
  184   3                      }
  185   2              }
  186   1              else
  187   1              {
  188   2                      Sum_Dis1 = 0;
C251 COMPILER V5.60.0,  Element                                                            25/03/24  20:40:06  PAGE 4   

  189   2                      Sum_Dis2 = 0;
  190   2                      Sum_Angle_C1 = 0;
  191   2                      Circle_Flag2 = 0;
  192   2              }
  193   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       755     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        31     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        95     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
