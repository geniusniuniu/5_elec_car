C251 COMPILER V5.60.0,  Element                                                            22/03/24  17:36:34  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Element
OBJECT MODULE PLACED IN .\Out_File\Element.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\CODE\Element.c XSMALL INTR2 WARNINGLEVEL(3) BR
                    -OWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\
                    -USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\Element.lst) OBJECT(.\Out_File\Element.obj) 

stmt  level    source

    1          #include "isr.h"
    2          #include <string.h>
    3          #include <stdio.h>
    4          #include "common.h"
    5          #include "Element.h"
    6          #include "Motor.h"
    7          #include "PID.h"
    8          #include "Buzzer.h"
    9          #include "MPU6050.h"
   10          
   11          extern float Exp_Speed;
   12          extern float Ratio;
   13          extern float ADC_proc[5];
   14          
   15          //上下坡标志位
   16          char Up_Down_Flag = 0;
   17          char delay_10ms = 0;
   18          
   19          //环岛标志位
   20          float Circle_Flag = 0;  // 左右环岛标志位
   21          char Circle_Flag2 = 0;
   22          
   23          //避障相关标志位
   24          char Barrier_Flag1=0;
   25          char Barrier_Flag2=0;
   26          char Barrier_Flag3=0;
   27          char Barrier_Executed = 0;
   28          char Barrier_Flag4=0;
   29          char Avoid_ON = 0;
   30          float Sum_Angle=0;
   31          
   32          
   33          void Elem_Up_Down(float Angle,float Gyro)  //上下坡
   34          {
   35   1      
   36   1              if(Angle > -4 && Gyro < -400)
   37   1                      Exp_Speed = 310;
   38   1              else if(Angle < -18)
   39   1                      Exp_Speed = 30;
   40   1      }
   41          
   42          
   43          //障碍物识别     
   44          void Elem_Barrier(float Gyro_Z)
   45          {
   46   1              #if BARRIER_DIR == 0
                               //向右避障
                               Gyro_Z = (Gyro_Z*2000)/32768;   
                               if(Barrier_Flag1==1)
                               {
                                       Ratio = -0.48 ;                 //直接更改期望值
                                       Sum_Angle += Gyro_Z*0.005;
                                       
                               }
                               if(Sum_Angle < -20)     //右拐避障
                               {
                                       Ratio = -0.01;
C251 COMPILER V5.60.0,  Element                                                            22/03/24  17:36:34  PAGE 2   

                                       Barrier_Flag1 = 0;   //出赛道角度停止积分
                                       Barrier_Flag2 = 1;
                                       Sum_Angle = 0;          //积分清零
                               }
                               if(Barrier_Flag2==1)
                               {
                                       Sum_Angle += Gyro_Z*0.005;   
                                       if(Sum_Angle < 22)  //左拐回正
                                       {
                                               Ratio = 0.48;           
                                       }
                                       else
                                               Barrier_Flag3 = 1;  //回正
                               }
                               
                               if(Barrier_Flag3==1)            //回正后标志位清零
                               {       
                                       Barrier_Flag1 = 0;
                                       Barrier_Flag2 = 0;
                                       Barrier_Flag3 = 0;
                                       Sum_Angle = 0;
                                       Barrier_Executed = 1;
                                       Avoid_ON = 0;
                               }
                       //      #if TRACE_METHOD2
                       //              Barrier_Flag4 == 30;
                       //      #endif
                       #elif BARRIER_DIR == 1  //向左避障
   86   1                      Gyro_Z = (Gyro_Z*2000)/32768;   
   87   1                      if(Barrier_Flag1==1)
   88   1                      {
   89   2                              Ratio = 0.48;                   //直接更改期望值
   90   2                              Sum_Angle += Gyro_Z*0.005;
   91   2                              
   92   2                      }
   93   1                      if(Sum_Angle > 20)      //左拐避障
   94   1                      {
   95   2                              Ratio = 0.01;
   96   2                              Barrier_Flag1 = 0;   //出赛道角度停止积分
   97   2                              Barrier_Flag2 = 1;
   98   2                              Sum_Angle = 0;          //积分清零
   99   2                      }
  100   1                      if(Barrier_Flag2==1)
  101   1                      {
  102   2                              Sum_Angle += Gyro_Z*0.005;   
  103   2                              if(Sum_Angle < -22)  //右拐回正
  104   2      
  105   2                                      Ratio = -0.48;          
  106   2                              else
  107   2                                      Barrier_Flag3 = 1;  //回正
  108   2                      }
  109   1                      
  110   1                      if(Barrier_Flag3==1)            //回正后标志位清零
  111   1                      {       
  112   2                              Barrier_Flag1 = 0;
  113   2                              Barrier_Flag2 = 0;
  114   2                              Barrier_Flag3 = 0;
  115   2                              Sum_Angle = 0;
  116   2                              Barrier_Executed = 1;
  117   2                              Avoid_ON = 0;
  118   2                      }
  119   1              #endif                          
  120   1      }
  121          
  122          
  123          float Sum_Dis1 = 0;
C251 COMPILER V5.60.0,  Element                                                            22/03/24  17:36:34  PAGE 3   

  124          float Sum_Dis2 = 0;
  125          float Sum_Angle_C1 = 0;
  126          void Elem_Circle(float Speed,float Gyro_Z)
  127          {
  128   1      //      static float Sum_Dis1 = 0;
  129   1      //      static float Sum_Dis2 = 0;
  130   1      //      static float Sum_Angle_C1 = 0;
  131   1              static float Delay_10Ms = 0;
  132   1              if(Delay_10Ms > 0)
  133   1              {
  134   2                      Circle_Flag = 0;
  135   2                      Circle_Flag2 = 0;
  136   2                      Ratio -= 0.2;
  137   2                      Delay_10Ms--;
  138   2                      return ;        //发生误判，退出函数
  139   2              }
  140   1              if(Circle_Flag2)
  141   1              {
  142   2                      x10_ms = 13;
  143   2                      Gyro_Z = (Gyro_Z*2000)/32768;
  144   2                      if(Sum_Dis1>DIS_ROUND_IN)
  145   2                      {
  146   3                              Sum_Angle_C1 += Gyro_Z*0.005;
  147   3                              if((Circle_Flag == 0 && ADC_proc[0]+ADC_proc[1] > ADC_proc[3]+ADC_proc[4]))
  148   3                                      Circle_Flag = LEFT_CIRCLE;
  149   3                              else if((Circle_Flag == 0 && ADC_proc[0]+ADC_proc[1] < ADC_proc[3]+ADC_proc[4]) )
  150   3                                      Circle_Flag = RIGHT_CIRCLE;
  151   3                              
  152   3                              if(Sum_Angle_C1 < 30 && Circle_Flag == LEFT_CIRCLE)
  153   3                                      Ratio = 0.42;
  154   3                              if(Sum_Angle_C1 > -30 && Circle_Flag == RIGHT_CIRCLE)
  155   3                                      Ratio = -0.42;
  156   3                      }
  157   2                      else
  158   2                              Sum_Dis1+=Speed;
  159   2                      
  160   2                      if(Sum_Angle_C1 > ROUND_L || Sum_Angle_C1 < ROUND_R )
  161   2                      {
  162   3                              if(ADC_proc[2] > 64)   //预出环 防止误判入环
  163   3                              {
  164   4                                      Sum_Dis2 += Speed;
  165   4                                      if(Sum_Dis2 > DIS_ROUND_OUT)
  166   4                                      {
  167   5                                              Sum_Dis1 = 0;
  168   5                                              Sum_Dis2 = 0;
  169   5                                              Sum_Angle_C1 = 0;
  170   5                                              Circle_Flag = 0;
  171   5                                              Circle_Flag2 = 0;
  172   5                                      }
  173   4                                      Delay_10Ms = 250;   //延时2500ms
  174   4                              }
  175   3                      }
  176   2              }
  177   1      }
  178          
  179          
  180          
  181          ////进行左环岛识别并进出左环岛
  182          //void Elem_Circle_L(float Speed,float Gyro_Z)
  183          //{
  184          //      static float Sum_Dis1 = 0;
  185          //      static float Sum_Dis2 = 0;
  186          //      static float Sum_Angle_C1 = 0;
  187          //      static char Delay_10Ms = 0;
  188          //      if(Delay_10Ms > 0)
  189          //      {
C251 COMPILER V5.60.0,  Element                                                            22/03/24  17:36:34  PAGE 4   

  190          //              circle_flag_L = 0;
  191          //              circle_flag_R = 0;
  192          //              Ratio -= 0.2;
  193          //              Delay_10Ms --;
  194          //              return;        //发生误判，强制退出
  195          //      }
  196          
  197          //      if(circle_flag_L == 1)  //识别圆环标志位
  198          //      {       
  199          //              Gyro_Z = (Gyro_Z*2000)/32768;
  200          //              if(Sum_Dis2>DIS_ROUND_IN)
  201          //              {
  202          //                      Sum_Angle_C1 += Gyro_Z*0.005;
  203          //                      if(Sum_Angle_C1 < 80)
  204          //                              Ratio = 0.52;
  205          //              }
  206          //              else
  207          //                      Sum_Dis2+=Speed;
  208          //              if(Sum_Angle_C1 > ROUND_L)
  209          //              {
  210          //                      if(ADC_proc[2] > 66)   //预出环 防止再次误判
  211          //                      {
  212          //                              Sum_Dis1 += Speed;
  213          //                              if(Sum_Dis1 > DIS_ROUND_OUT)
  214          //                              {
  215          //                                      Sum_Dis1=0;
  216          //                                      Sum_Dis2=0;
  217          //                                      Sum_Angle_C1=0;
  218          //                                      circle_flag_R=0;
  219          //                              }
  220          //                              Delay_10Ms = 100;   //延时1000ms
  221          //                      }
  222          //              }
  223          //              
  224          //                              //实验室右环岛是最后一个特殊元素
  225          //                              //如果有多个重复元素，再置一个记数标志位
  226          //                              //Element_Num 
  227          //                              //if(Element_Num == x) //重复元素全部走完
  228          ////                            Avoid_ON == 1   
  229          //              
  230          ////如果误入环岛，也需要正常出去        ************************************************************************
             -***/
  231          //      }
  232          //}
  233          
  234          
  235          
  236          //float Sum_Dis1 = 0;
  237          //float Sum_Dis2 = 0;
  238          //float Sum_Angle_C1 = 0;
  239          ////进行右环岛识别并进出右环岛
  240          //void Elem_Circle_R(float Speed,float Gyro_Z)
  241          //{
  242          ////    static float Sum_Dis1 = 0;
  243          ////    static float Sum_Dis2 = 0;
  244          ////    static float Sum_Angle_C1 = 0;
  245          //      static char Delay_10Ms = 0;
  246          //      if(Delay_10Ms > 0)
  247          //      {
  248          //              circle_flag_R = 0;
  249          //              circle_flag_L = 0;
  250          //              Ratio += 0.2;
  251          //              Delay_10Ms--;
  252          //              return;
  253          //      }
  254          //      if(circle_flag_R == 1)  //识别圆环标志位
C251 COMPILER V5.60.0,  Element                                                            22/03/24  17:36:34  PAGE 5   

  255          //      {       
  256          //              Gyro_Z = (Gyro_Z*2000)/32768;
  257          //              if(Sum_Dis2>DIS_ROUND_IN)
  258          //              {
  259          //                      Sum_Angle_C1 += Gyro_Z*0.005;
  260          //                      if(Sum_Angle_C1 > -80)
  261          //                              Ratio = -0.52;
  262          //              }
  263          //              else
  264          //                      Sum_Dis2 += Speed;
  265          //              if(Sum_Angle_C1 < ROUND_R)
  266                  //      {
  267                  //              if(ADC_proc[2] > 66)   //预出环 防止再次误判
  268                  //              {
  269                  //                      Sum_Dis1 += Speed;
  270                  //                      if(Sum_Dis1 > DIS_ROUND_OUT)
  271                  //                      {
  272                  //                              Sum_Dis1=0;
  273                  //                              Sum_Dis2=0;
  274                  //                              Sum_Angle_C1=0;
  275                  //                              circle_flag_R=0;
  276                  //                      }
  277                  //                      Delay_10Ms = 100;   //延时1000ms
  278                  //              }
  279          //              }
  280          //      }
  281          //}
  282          
  283          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       719     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        33     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        93     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
