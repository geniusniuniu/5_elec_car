C251 COMPILER V5.60.0,  motor                                                              27/03/24  17:22:29  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE motor
OBJECT MODULE PLACED IN .\Out_File\motor.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\CODE\motor.c XSMALL INTR2 WARNINGLEVEL(3) BROW
                    -SE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\US
                    -ER\inc;..\USER\src) DEBUG PRINT(.\Out_File\motor.lst) OBJECT(.\Out_File\motor.obj) 

stmt  level    source

    1          #include "zf_tim.h"
    2          #include "isr.h"
    3          #include <string.h>
    4          #include <stdio.h>
    5          #include "common.h"
    6          #include "Motor.h"
    7          #include "ZF_PWM.h"
    8          #include "zf_gpio.h"
    9          #include "PID.h"
   10          #include <STC32Gxx.H>
   11          #include <math.h>
   12          
   13          
   14          char A = 0; 
   15          char A1 = 0;
   16          float Speed_L,Speed_R;
   17          
   18          void Limit_Out(float *Output,float Limit_Min,float Limit_Max)
   19          {
   20   1          if (*Output <= Limit_Min) *Output = Limit_Min;
   21   1          else if (*Output >= Limit_Max) *Output = Limit_Max;
   22   1      }
   23          
   24          float Num2Abs(float x)
   25          {
   26   1              if(x < 0)
   27   1                      return -x;
   28   1              return x;
   29   1      }
   30          
   31          void Motor_Init(void)
   32          {
   33   1              pwm_init(PWMA_CH1P_P60, 15000, 0);              //左电机-
   34   1              pwm_init(PWMA_CH3P_P64, 15000, 0);              //右电机-
   35   1              pwm_init(PWMA_CH2P_P62, 15000, 0);              //左电机--PWM
   36   1              pwm_init(PWMA_CH4P_P66, 15000, 0);              //右电机-PWM
   37   1      }
   38          
   39          void Left_SetSpeed(float speed)
   40          {
   41   1              static int16 Special_NumL = 0;  //异常情况记数
   42   1              if(abs(Speed_L) >= Special_Speed)               //连续30次都超过最大速度，发生异常
   43   1                      Special_NumL++;
   44   1              else 
   45   1                      Special_NumL = 0;
   46   1              if(Special_NumL >= 50)                  //出现异常
   47   1              {
   48   2                      pwm_duty(PWMA_CH2P_P62, 0);
   49   2                      pwm_duty(PWMA_CH1P_P60, 0);
   50   2                      while(1);
   51   2              }
   52   1              else                             //没有出现异常
   53   1              {
   54   2                      if(speed >= SPEED_MAX)                  speed = SPEED_MAX; 
   55   2                      else if(speed <= -SPEED_MAX)    speed = -SPEED_MAX;
   56   2                      if(speed > 0)
   57   2                      {
C251 COMPILER V5.60.0,  motor                                                              27/03/24  17:22:29  PAGE 2   

   58   3                              pwm_duty(PWMA_CH2P_P62, (int)speed);
   59   3                              pwm_duty(PWMA_CH1P_P60, 0);
   60   3                      } 
   61   2                      else if(speed < 0)
   62   2                      {
   63   3                              pwm_duty(PWMA_CH2P_P62, 0);
   64   3                              pwm_duty(PWMA_CH1P_P60, -(int)speed);
   65   3                      } 
   66   2                      else 
   67   2                      {
   68   3                              pwm_duty(PWMA_CH2P_P62, 0);
   69   3                              pwm_duty(PWMA_CH1P_P60, 0);
   70   3                      }
   71   2              }
   72   1              
   73   1      }
   74          
   75          void Right_SetSpeed(float speed)        
   76          {
   77   1              static int16 Special_NumR = 0;  //异常情况记数
   78   1              if(abs(Speed_L) >= Special_Speed)               //连续30次都超过最大速度，发生异常
   79   1                      Special_NumR++;
   80   1              else 
   81   1                      Special_NumR = 0;
   82   1              if(Special_NumR >= 50)                  //出现异常
   83   1              {
   84   2                      pwm_duty(PWMA_CH2P_P62, 0);
   85   2                      pwm_duty(PWMA_CH1P_P60, 0);
   86   2                      while(1);
   87   2              }
   88   1          else
   89   1              {
   90   2                      if(speed > 0)
   91   2                      {
   92   3                              pwm_duty(PWMA_CH3P_P64, (int)speed);
   93   3                              pwm_duty(PWMA_CH4P_P66, 0);
   94   3                      } 
   95   2                      else if(speed < 0)
   96   2                      {
   97   3                              pwm_duty(PWMA_CH3P_P64, 0);
   98   3                              pwm_duty(PWMA_CH4P_P66, -(int)speed);
   99   3                      } 
  100   2                      else 
  101   2                      {
  102   3                              pwm_duty(PWMA_CH3P_P64, 0);
  103   3                              pwm_duty(PWMA_CH4P_P66, 0);
  104   3                      }
  105   2              
  106   2              }
  107   1      }
  108          
  109          void Get_Speed(void)    //获取速度
  110          {
  111   1              static float Speed_L_Last=0;
  112   1              static float Speed_R_Last=0;
  113   1              if(P53 == 0)             Speed_L = ctimer_count_read(CTIM3_P04);        ////左轮方向读取数值
  114   1              else                            {Speed_L = ctimer_count_read(CTIM3_P04); Speed_L = -Speed_L;}
  115   1              ctimer_count_clean(CTIM3_P04);                                                                  //清除计数值，开始下一轮计数
  116   1      
  117   1              
  118   1              if(P35 == 1)             Speed_R = ctimer_count_read(CTIM0_P34);                //右轮方向读取数值
  119   1              else                            {Speed_R = ctimer_count_read(CTIM0_P34); Speed_R = -Speed_R;}
  120   1              ctimer_count_clean(CTIM0_P34);                                                                  //清除计数值，开始下一轮计数
  121   1              Speed_L = Speed_L * 0.5 + Speed_L_Last * 0.5;
  122   1              Speed_R = Speed_R * 0.5 + Speed_R_Last * 0.5;
  123   1              Speed_L_Last = Speed_L;
C251 COMPILER V5.60.0,  motor                                                              27/03/24  17:22:29  PAGE 3   

  124   1              Speed_R_Last = Speed_R;
  125   1      }
  126          
  127          
  128          void Motor_Test(float Speed)
  129          {
  130   1              Right_SetSpeed(-Speed);
  131   1              Left_SetSpeed(Speed);   
  132   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       652     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        22          4
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        38     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
