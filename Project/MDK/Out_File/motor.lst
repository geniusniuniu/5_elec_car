C251 COMPILER V5.60.0,  motor                                                              05/03/24  18:02:48  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE motor
OBJECT MODULE PLACED IN .\Out_File\motor.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\CODE\motor.c XSMALL INTR2 WARNINGLEVEL(3) BROW
                    -SE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\US
                    -ER\inc;..\USER\src) DEBUG PRINT(.\Out_File\motor.lst) OBJECT(.\Out_File\motor.obj) 

stmt  level    source

    1          #include "zf_tim.h"
    2          #include "isr.h"
    3          #include <string.h>
    4          #include <stdio.h>
    5          #include "common.h"
    6          #include "Motor.h"
    7          #include "ZF_PWM.h"
    8          #include "zf_gpio.h"
    9          #include "PID.h"
   10          #include <STC32Gxx.H>
   11          
   12          PID_InitTypeDef Left_Wheel_PID;
   13          PID_InitTypeDef Right_Wheel_PID;
   14          PID_InitTypeDef Turn_PID;
   15          
   16          float Speed_L,Speed_R;
   17          
   18          void Limit_Out(float *Output,float Limit_Min,float Limit_Max)
   19          {
   20   1          if (*Output <= Limit_Min) *Output = Limit_Min;
   21   1          else if (*Output >= Limit_Max) *Output = Limit_Max;
   22   1      }
   23          
   24          float Num2Abs(float x)
   25          {
   26   1              if(x < 0)
   27   1                      return -x;
   28   1              return x;
   29   1      }
   30          
   31          void Motor_Init(void)
   32          {
   33   1              pwm_init(PWMA_CH1P_P60, 15000, 0);              //左电机-
   34   1              pwm_init(PWMA_CH3P_P64, 15000, 0);              //右电机-
   35   1              pwm_init(PWMA_CH2P_P62, 15000, 0);              //左电机--PWM
   36   1              pwm_init(PWMA_CH4P_P66, 15000, 0);              //右电机-PWM
   37   1      }
   38          
   39          
   40          void Left_SetSpeed(float speed){
   41   1          if(speed > SPEED_MAX)                       speed = SPEED_MAX; 
   42   1              else if(speed < -SPEED_MAX)             speed = -SPEED_MAX;
   43   1          if(speed > 0)
   44   1              {
   45   2              pwm_duty(PWMA_CH2P_P62, (int)speed);
   46   2              pwm_duty(PWMA_CH1P_P60, 0);
   47   2          } 
   48   1              else if(speed < 0)
   49   1              {
   50   2              pwm_duty(PWMA_CH2P_P62, 0);
   51   2              pwm_duty(PWMA_CH1P_P60, -(int)speed);
   52   2          } 
   53   1              else 
   54   1              {
   55   2              pwm_duty(PWMA_CH2P_P62, 0);
   56   2              pwm_duty(PWMA_CH1P_P60, 0);
   57   2          }
C251 COMPILER V5.60.0,  motor                                                              05/03/24  18:02:48  PAGE 2   

   58   1      }
   59          
   60          void Right_SetSpeed(float speed){
   61   1          if(speed > SPEED_MAX)                       speed = SPEED_MAX; 
   62   1              else if(speed < -SPEED_MAX)             speed = -SPEED_MAX;
   63   1          if(speed > 0)
   64   1              {
   65   2              pwm_duty(PWMA_CH3P_P64, (int)speed);
   66   2              pwm_duty(PWMA_CH4P_P66, 0);
   67   2          } 
   68   1              else if(speed < 0)
   69   1              {
   70   2              pwm_duty(PWMA_CH3P_P64, 0);
   71   2              pwm_duty(PWMA_CH4P_P66, -(int)speed);
   72   2          } 
   73   1              else 
   74   1              {
   75   2              pwm_duty(PWMA_CH3P_P64, 0);
   76   2              pwm_duty(PWMA_CH4P_P66, 0);
   77   2          }
   78   1      }
   79          
   80          void Get_Speed(void)    //获取速度
   81          {
   82   1              if(P53 == 0)             Speed_L = ctimer_count_read(CTIM3_P04);        ////左轮方向读取数值
   83   1              else                            {Speed_L = ctimer_count_read(CTIM3_P04); Speed_L = -Speed_L;}
   84   1              ctimer_count_clean(CTIM3_P04);                                                                  //清除计数值，开始下一轮计数
   85   1      
   86   1              
   87   1              if(P35 == 1)             Speed_R = ctimer_count_read(CTIM0_P34);                //右轮方向读取数值
   88   1              else                            {Speed_R = ctimer_count_read(CTIM0_P34); Speed_R = -Speed_R;}
   89   1              ctimer_count_clean(CTIM0_P34);                                                                  //清除计数值，开始下一轮计数
   90   1      }
   91          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       495     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       116          4
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
