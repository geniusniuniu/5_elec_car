C251 COMPILER V5.60.0,  main                                                               05/03/24  18:02:48  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Out_File\main.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\USER\src\main.c XSMALL INTR2 WARNINGLEVEL(3) B
                    -ROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..
                    -\USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\main.lst) OBJECT(.\Out_File\main.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          #include "Motor.h"
    3          #include "ADC.h"
    4          #include "MPU6050.h"
    5          #include "Element.h"
    6          #include "ADC.h"
    7          #include "math.h"
    8          #include "TOF.h"
    9          #include "Buzzer.h"
   10          #include "Key.h"
   11          #include "ui.h"
   12          
   13          extern uint16 vl53l0x_distance_mm;
   14          extern uint8 vl53l0x_finsh_flag;
   15          
   16          short gx, gy, gz;
   17          char Isr_flag_10 = 0; 
   18          
   19          char KeyValue = 0;
   20          
   21          float Diff,Plus;
   22          float Ratio = 0;
   23          
   24          float Diff_Mid,Plus_Mid;
   25          float Ratio_Mid = 0;
   26          float sum;
   27          
   28          float Exp_Speed_L = 0;
   29          float Exp_Speed_R = 0;
   30          float Exp_Speed = 200;
   31          float Adjust_Val = 0;
   32          void Init_all(void);
   33          void Get_Ratio(void);
   34          
   35          void main(void) 
   36          {
   37   1              Init_all();
   38   1              EnableGlobalIRQ();      
   39   1              Adjust_Val = -180;
   40   1              while(1)
   41   1              {               
   42   2      //              printf("%.2f,%.2f,%.2f,%.2f,%.2f\r\n",Exp_Speed_L,Exp_Speed_R,Speed_L,Speed_R,Turn_PID.PID_Out*0.09);
   43   2      //              printf("%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\r\n",ADC_proc[0],ADC_proc[1],Sum_Angle,sum_L,sum_R,Ratio);
   44   2                      
   45   2      /******************************************** 按键读值***********************************************
             -***********************/       
   46   2              ui_show();
   47   2              KeyValue = GetKey_Value(0);
   48   2              if              (KeyValue == KEY2_PRES)         {page++; if(page >= 3)  page = 3;oled_all_static_state();}              
   49   2              else if (KeyValue == KEY3_PRES)         {page--; if(page <= 0)  page = 0;oled_all_static_state();}                      
   50   2              else if (KeyValue == KEY0_PRES)         Adjust_Val += 1;
   51   2              else if (KeyValue == KEY1_PRES)         Adjust_Val -= 1;
   52   2              
   53   2                      
   54   2      /******************************************** 类似中断服务处理 **********************************
             -****************************/ 
   55   2                      if(Isr_flag_10 == 1)  
C251 COMPILER V5.60.0,  main                                                               05/03/24  18:02:48  PAGE 2   

   56   2                      {
   57   3                              ADC_GetValue();
   58   3                              MPU6050_Refresh_DMP();
   59   3                              MPU_Get_Gyroscope(&gx, &gy, &gz);
   60   3                              Get_Ratio();
   61   3                              
   62   3                      /************************************************ 直道弯道判别 **********************************
             -**********/ 
   63   3                              if(Ratio > -0.1 && Ratio < 0.1) //直线
   64   3                              {
   65   4                                      Turn_PID.Kp = -20;
   66   4                                      Turn_PID.Kd = -3.5;
   67   4                                      Left_Wheel_PID.Kp = Right_Wheel_PID.Kp = 20;
   68   4                                      Left_Wheel_PID.Ki = Right_Wheel_PID.Ki = 0.6;
   69   4                                      Exp_Speed = 220;
   70   4                              }
   71   3                              else   // 拐弯
   72   3                              {
   73   4                                      Turn_PID.Kp = Adjust_Val;
   74   4                                      Turn_PID.Kd = -32;
   75   4                                      Left_Wheel_PID.Kp = Right_Wheel_PID.Kp = 28;
   76   4                                      Left_Wheel_PID.Ki = Right_Wheel_PID.Ki = 1.28; //i太大会出现矫正滞后，导致车反方向飘
             -逸
   77   4                                      Exp_Speed = 180;
   78   4                              }
   79   3                              
   80   3                      /************************************************ 避开路障 ****************************************
             -*******/                         
   81   3                              if(Barrier_Flag4 == 0) //确保避障只运行一次
   82   3                              {
   83   4                                      vl53l0x_get_distance();
   84   4                                      if(vl53l0x_finsh_flag)  //一次测距完成
   85   4                                      {
   86   5                                              if (vl53l0x_distance_mm < 600)          //      检测到路障
   87   5                                              {
   88   6                                                      x10_ms = 13;  
   89   6                                                      Barrier_Flag1 = 1;
   90   6                                              }
   91   5                                      }
   92   4                                      Elem_Barrier(gz);
   93   4                              }
   94   3                              
   95   3                      /************************************************ 圆环判别 ****************************************
             -*******/ 
   96   3                              if(ADC_proc[2] > 75 && (ADC_proc[3] > 8 || ADC_proc[1] > 8))    //中间横电感识别圆环
   97   3                              {
   98   4                                      x10_ms = 13; 
   99   4                                      if(ADC_proc[3] > ADC_proc[1])  //判断左右
  100   4                                      {
  101   5                                              circle_flag_R = 1;
  102   5                                              Elem_Circle_R((Speed_L + Speed_R)/2,gz);        
  103   5                                      }
  104   4                                      else if(ADC_proc[3] < ADC_proc[1]) 
  105   4                                      {
  106   5                                              circle_flag_L = 1;
  107   5                                              Elem_Circle_L((Speed_L + Speed_R)/2,gz);
  108   5                                      }
  109   4                              }
  110   3                                      
  111   3                      /************************************************ 转向环计算 *************************************
             -*********/                         
  112   3                              PID_Calculate(&Turn_PID,Ratio*100,gz/100); 
  113   3                              Limit_Out(&Turn_PID.PID_Out,-2000,5000);
  114   3                                      
  115   3                      /************************************************ 上下坡道 ****************************************
             -********/ 
C251 COMPILER V5.60.0,  main                                                               05/03/24  18:02:48  PAGE 3   

  116   3                              Elem_Up_Down(Pitch,gy);         
  117   3                                      
  118   3                      /************************************************ 特殊元素降速 **********************************
             -**********/ 
  119   3                              if( circle_flag_L == 1 || circle_flag_R == 1 || Barrier_Flag2 == 1 || Barrier_Flag1 == 1)  
  120   3                                      //Exp_Speed = 160;
  121   3                              Exp_Speed_L = Exp_Speed + Turn_PID.PID_Out*0.09;
  122   3                              Exp_Speed_R = Exp_Speed - Turn_PID.PID_Out*0.09;
  123   3                              
  124   3                              Get_Speed();  //获取车速
  125   3      
  126   3                              PID_Calculate(&Left_Wheel_PID,Exp_Speed_L,Speed_L);//速度环PID计算
  127   3                              PID_Calculate(&Right_Wheel_PID,Exp_Speed_R,Speed_R);
  128   3                              
  129   3                 /********************************************* 驶离赛道，停车 ********************************
             -*************/ 
  130   3                              if(ADC_proc[2]<5 && Barrier_Executed == 1) 
  131   3                              {
  132   4                                      Left_Wheel_PID.PID_Out = 0;
  133   4                                      Right_Wheel_PID.PID_Out = 0;
  134   4                              }
  135   3                              
  136   3      //                      Left_SetSpeed(Left_Wheel_PID.PID_Out);
  137   3      //                      Right_SetSpeed(Right_Wheel_PID.PID_Out);
  138   3      
  139   3                              Left_SetSpeed(2500);
  140   3                              Right_SetSpeed(-3000);
  141   3                              Isr_flag_10 = 0;
  142   3                      } 
  143   2              }
  144   1      }
  145          
  146          void Init_all(void)
  147          {
  148   1              WTST = 0;                                               //���ó������ȴ���������ֵΪ0�ɽ�CPUִ�г��
             -���ٶ�����Ϊ���  
  149   1              DisableGlobalIRQ();                             //�ر����ж�
  150   1              sys_clk = 35000000;                             //����ϵͳƵ��Ϊ35MHz
  151   1      
  152   1      //��ʼ���Ĵ���
  153   1              board_init();                                   
  154   1      
  155   1      ////编码器方向引脚初始化
  156   1              gpio_mode(P5_3, GPIO);          
  157   1              gpio_mode(P3_5, GPIO);  
  158   1              
  159   1      ////按键引脚初始化
  160   1              Key_Init();
  161   1              
  162   1      ////测距模块初始化
  163   1              //gpio_mode(P3_2, GPIO);
  164   1      //      vl53l0x_init();
  165   1              
  166   1      ////OLED初始化
  167   1              ui_init();                                      
  168   1              
  169   1      ////MPU6050初始化
  170   1              MPU6050_DMP_Init();     
  171   1      //      
  172   1      ////定时器初始化
  173   1              pit_timer_ms(TIM_4, 10);                //10ms定时器
  174   1      //      
  175   1      ////编码器初始化
  176   1              ctimer_count_init(CTIM0_P34);   //编码器1计数
  177   1              ctimer_count_init(CTIM3_P04);   //编码器2计数
  178   1              
C251 COMPILER V5.60.0,  main                                                               05/03/24  18:02:48  PAGE 4   

  179   1      ////串口初始化
  180   1      //      uart_init(UART_1, UART1_RX_P30, UART1_TX_P31, 115200, TIM_2);
  181   1              
  182   1      ////电机初始化
  183   1              Motor_Init();
  184   1              
  185   1      ////蜂鸣器初始化
  186   1              //Buzzer_Init();
  187   1              
  188   1      ////初始化所有AD引脚
  189   1              ADC_InitAll(); 
  190   1              
  191   1      ////pid初始化  PID_Init(结构体, KP, KI, KD, 输出限幅，积分限幅)
  192   1              PID_Init(&Left_Wheel_PID , 20, 0.5, 0, 10000, 2000);
  193   1              PID_Init(&Right_Wheel_PID, 20, 0.5, 0, 10000, 2000);
  194   1              PID_Init(&Turn_PID , -2, 0, 0 ,10000, 0);
  195   1      } 
  196          
  197          //对ADC值进行处理得到差比和
  198          void Get_Ratio(void)
  199          {
  200   1              sum = ADC_proc[0]+ ADC_proc[1]+ADC_proc[4]+ADC_proc[3];
  201   1      //      sum_L = sqrt((ADC_proc[0]*ADC_proc[0]+ADC_proc[1]*ADC_proc[1]));
  202   1      //      sum_R = sqrt((ADC_proc[2]*ADC_proc[2]+ADC_proc[3]*ADC_proc[3]));
  203   1      
  204   1              Diff = ADC_proc[0] - ADC_proc[4];
  205   1              Plus = ADC_proc[0] + ADC_proc[4];
  206   1              
  207   1              Diff_Mid = ADC_proc[1] - ADC_proc[3];
  208   1              Plus_Mid = ADC_proc[1] + ADC_proc[3];
  209   1              
  210   1              if(sum > 20)  //边界保护
  211   1              {
  212   2                      Ratio = Diff/Plus;
  213   2                      Ratio_Mid = Diff_Mid/Plus_Mid;
  214   2                      if(Plus_Mid > 30 && Plus_Mid < 65)
  215   2                      {
  216   3                              Ratio = Ratio_Mid;
  217   3                      }
  218   2              }
  219   1      
  220   1      }
  221          
  222          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1198     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        52     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        58     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
