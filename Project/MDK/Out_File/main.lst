C251 COMPILER V5.60.0,  main                                                               24/03/24  22:24:58  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Out_File\main.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\USER\src\main.c XSMALL INTR2 WARNINGLEVEL(3) B
                    -ROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..
                    -\USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\main.lst) OBJECT(.\Out_File\main.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          #include "Motor.h"
    3          #include "ADC.h"
    4          #include "MPU6050.h"
    5          #include "Element.h"
    6          #include "ADC.h"
    7          #include "math.h"
    8          #include "TOF.h"
    9          #include "Buzzer.h"
   10          #include "Key.h"
   11          #include "ui.h"
   12          
   13          #define EDGE_PROTECT 35
   14          
   15          #if TRACE_METHOD2
   16                  float sum_L,sum_R;
   17          #endif
   18          
   19          extern char Up_Down_Flag;
   20          extern uint16 vl53l0x_distance_mm;
   21          extern uint8 vl53l0x_finsh_flag;
   22          
   23          short gx, gy, gz;
   24          char Isr_flag_10 = 0; 
   25          char KeyValue = 0;
   26          float Num1 = 0;
   27          
   28          float Diff,Plus;
   29          float Ratio = 0;
   30          float Diff_Mid,Plus_Mid;
   31          float Ratio_Mid = 0;
   32          float sum = 0;
   33          float Exp_Speed_L = 0;
   34          float Exp_Speed_R = 0;
   35          float Exp_Speed = 200;
   36          float Adjust_Val = 0;
   37          float temp_Speed = 0;
   38          
   39          
   40          void Init_all(void);
   41          void Get_Ratio(void);
   42          
   43          void main(void) 
   44          {
   45   1              Init_all();
   46   1              EnableGlobalIRQ();      
   47   1              Adjust_Val = -180;
   48   1              while(1)
   49   1              {               
   50   2                      printf("%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\r\n",Num1,Speed_R,Left_Wheel_PID.PID_Out,Right_Wheel_PID.PID_Out,
             -ADC_proc[4],Ratio);
   51   2      //              printf("%.2f,%.2f\r\n",Speed_L,Speed_R);
   52   2      /******************************************** 按键读值***********************************************
             -***********************/       
   53   2                      ui_show();
   54   2                      KeyValue = GetKey_Value(0);
   55   2                      if              (KeyValue == KEY2_PRES)         {page++; if(page >= 3)  page = 3;oled_all_static_state();}              
C251 COMPILER V5.60.0,  main                                                               24/03/24  22:24:58  PAGE 2   

   56   2                      else if (KeyValue == KEY3_PRES)         {page--; if(page <= 0)  page = 0;oled_all_static_state();}                      
   57   2                      else if (KeyValue == KEY0_PRES)         Adjust_Val += 1;
   58   2                      else if (KeyValue == KEY1_PRES)         Adjust_Val -= 1;
   59   2              
   60   2      ///******************************************** 类似中断服务处理 ********************************
             -******************************/ 
   61   2                      if(Isr_flag_10 == 1)  
   62   2                      {
   63   3                              ADC_GetValue();
   64   3                              MPU6050_Refresh_DMP();
   65   3                              MPU_Get_Gyroscope(&gx, &gy, &gz);
   66   3                              Get_Ratio();
   67   3                              
   68   3                      /************************************************ 直道弯道判别 **********************************
             -**********/ 
   69   3                              
   70   3                              #if TRACE_METHOD2  //向量法
   71   3                                      if(Ratio >= -0.1 && Ratio <= 0.1) //直线
   72   3                                      {
   73   4                                              Turn_PID.Kp = -15;
   74   4                                              Turn_PID.Kd = -2.6;
   75   4                                              Left_Wheel_PID.Kp = Right_Wheel_PID.Kp = 20;
   76   4                                              Left_Wheel_PID.Ki = Right_Wheel_PID.Ki = 0.55;
   77   4                                              Exp_Speed = 310;
   78   4                                      }
   79   3                                      else   // 拐弯    
   80   3                                      {
   81   4                                              Turn_PID.Kp = -200;  // -180
   82   4                                              Turn_PID.Kd = -35;  // -45
   83   4                                              Left_Wheel_PID.Kp = 40;  // 36
   84   4                                              Left_Wheel_PID.Ki = 0.8; //0.8
   85   4                                              Right_Wheel_PID.Kp = 40;
   86   4                                              Right_Wheel_PID.Ki = 0.8;
   87   4                                              Exp_Speed = 280;
   88   4                                      }
   89   3                                      
   90   3                              #elif TRACE_METHOD1  //单向巡线
                                               if(Ratio > -0.16 && Ratio < 0.16) //直线
                                               {
                                                       Turn_PID.Kp = -20;
                                                       Turn_PID.Kd = -3.5;
                                                       Left_Wheel_PID.Kp  = 20;
                                                       Left_Wheel_PID.Ki  = 0.6;
                                                       
                                                       Right_Wheel_PID.Kp = 20;
                                                       Right_Wheel_PID.Ki = 0.6; 
                                                       Exp_Speed = 240;
                                               } 
                                               else   // 拐弯
                                               {
                                                       Turn_PID.Kp = -180 ;
                                                       Turn_PID.Kd = -32;
                                                       Left_Wheel_PID.Kp  = 26;
                                                       Left_Wheel_PID.Ki  = 1.26;
                                                       
                                                       Right_Wheel_PID.Kp = 26;
                                                       Right_Wheel_PID.Ki = 1.26; //i太大会出现矫正滞后，导致车反方向飘逸
                                                       Exp_Speed = 200;
                                               }       
                                                       
                                       #endif  
  115   3                                      
  116   3                      /************************************************ 避开路障 ****************************************
             -*******/         
  117   3      //                      
  118   3      //                              #if BARRIER_FIELD_STATUS
C251 COMPILER V5.60.0,  main                                                               24/03/24  22:24:58  PAGE 3   

  119   3      //                              if(Avoid_ON == 1)                       /*接收到最后一个元素的标志位后再开启避障*/
  120   3      //                                      Barrier_Executed = 0;
  121   3      //                              else  
  122   3      //                                      Barrier_Executed = 1;
  123   3      //                      #endif                          
  124   3      //                      if(Barrier_Executed == 0)
  125   3      //                      {       
  126   3                                      vl53l0x_get_distance();
  127   3      //                              if(vl53l0x_finsh_flag)  //一次测距完成
  128   3      //                              {
  129   3      //                                      if (vl53l0x_distance_mm < 800)          //      检测到路障
  130   3      //                                      {
  131   3      //                                              x10_ms = 13;  
  132   3      //                                              Barrier_Flag1 = 1;
  133   3      //                                      }
  134   3      //                              }
  135   3      //                              Elem_Barrier(gz);
  136   3      //                      }
  137   3      //                      #if TRACE_METHOD2  //弥补向量法检测缺陷导致车身反偏
  138   3      //                              if(Barrier_Flag4 > 0)
  139   3      //                              {
  140   3      //                                      Ratio = -0.3;
  141   3      //                                      Barrier_Flag4 -= 1;
  142   3      //                              }       
  143   3      //                      #endif
  144   3      
  145   3      //              /************************************************ 圆环判别 **************************************
             -*********/ 
  146   3                              
  147   3                              if(ADC_proc[2] > 66 || ADC_proc[0] > 61.5 || ADC_proc[4] > 61.5) 
  148   3                                      Circle_Flag2 = 1;   //识别到圆环
  149   3                              if(vl53l0x_finsh_flag == 1 && vl53l0x_distance_mm < 400)        //一次测距完成
  150   3                                      Num1 = 200;
  151   3                              if(Num1 > 0)
  152   3                              {
  153   4                                      Circle_Flag2 = 0;
  154   4                                      Num1--;
  155   4                              }
  156   3                              Elem_Circle((Speed_L+Speed_R)/2,gz);    
  157   3                              
  158   3                      /************************************************ 转向环计算 *************************************
             -*********/         
  159   3                              
  160   3                              PID_Calculate(&Turn_PID,Ratio*100,gz/100); 
  161   3                              Limit_Out(&Turn_PID.PID_Out,-5000,5000);
  162   3                              
  163   3                      /************************************************ 上下坡道 ****************************************
             -********/ 
  164   3                              Elem_Up_Down(Pitch,gy);         
  165   3                      
  166   3                      /************************************************ 特殊元素降速 **********************************
             -**********/ 
  167   3                              if(Barrier_Flag2 == 1 || Barrier_Flag1 == 1)  
  168   3                                      Exp_Speed = 280;
  169   3                              if(Ratio > 0)   
  170   3                              {
  171   4                                      Exp_Speed_L = Exp_Speed + Turn_PID.PID_Out*0.09;
  172   4                                      Exp_Speed_R = Exp_Speed - Turn_PID.PID_Out*0.03;
  173   4                              }
  174   3                              else
  175   3                              {
  176   4                                      Exp_Speed_L = Exp_Speed + Turn_PID.PID_Out*0.03;
  177   4                                      Exp_Speed_R = Exp_Speed - Turn_PID.PID_Out*0.09;
  178   4                              }
  179   3                              
  180   3                              Get_Speed();  //获取车速
C251 COMPILER V5.60.0,  main                                                               24/03/24  22:24:58  PAGE 4   

  181   3      
  182   3                              PID_Calculate(&Left_Wheel_PID,Exp_Speed_L,Speed_L);//速度环PID计算
  183   3                              PID_Calculate(&Right_Wheel_PID,Exp_Speed_R,Speed_R);
  184   3                              
  185   3                 /********************************************* 驶离赛道，停车 ********************************
             -*************/ 
  186   3                              if(ADC_proc[0]<2 && ADC_proc[4]<2 && Barrier_Executed == 0) 
  187   3                              {
  188   4                                      Left_Wheel_PID.PID_Out = 0;
  189   4                                      Right_Wheel_PID.PID_Out = 0;
  190   4                              }
  191   3                 /********************************************* 设置左右PWM **************************************
             -**********/         
  192   3                              if(A == 0 )
  193   3                                      Left_SetSpeed(Left_Wheel_PID.PID_Out);
  194   3                              if(A1 == 0)                     
  195   3                                      Right_SetSpeed(Right_Wheel_PID.PID_Out);
  196   3                              
  197   3      //                      Motor_Test(3000);
  198   3                              Isr_flag_10 = 0;
  199   3                      } 
  200   2              }
  201   1      }
  202          
  203          //对ADC值进行处理得到差比和
  204          void Get_Ratio(void)
  205          {
  206   1              #if TRACE_METHOD2
  207   1              //向量法
  208   1                      sum_L = sqrt((ADC_proc[0]*ADC_proc[0]+ADC_proc[1]*ADC_proc[1]));
  209   1                      sum_R = sqrt((ADC_proc[4]*ADC_proc[4]+ADC_proc[3]*ADC_proc[3]));
  210   1                      Diff = sum_L - sum_R;
  211   1                      Plus = sum_L + sum_R;
  212   1                  if(ADC_proc[0]+ADC_proc[1]+ADC_proc[3]+ADC_proc[4] > EDGE_PROTECT)  //如果小于EDGE_PROTECT
  213   1                                      Ratio = Diff/Plus;                                                                                      //视作丢线，下次偏差值
  214   1      //              else                                                                                                                            //在上次基础上再次加（减）
  215   1      //              {
  216   1      //                      if(Ratio >= 0)
  217   1      //                              Ratio += 0.3;
  218   1      //                      else
  219   1      //                              Ratio -= 0.3;
  220   1      //              }
  221   1              
  222   1              #elif TRACE_METHOD1 //单向巡线
                               Diff = ADC_proc[0] - ADC_proc[4];
                               Plus = ADC_proc[0] + ADC_proc[4];
                               
                               Diff_Mid = ADC_proc[1] - ADC_proc[3];
                               Plus_Mid = ADC_proc[1] + ADC_proc[3];
               
                               Ratio = Diff/Plus;
                               Ratio_Mid = Diff_Mid/Plus_Mid;
                               if((Plus_Mid > 36 && Plus_Mid < 75)|| Plus <45)
                                       Ratio = Ratio_Mid;
               
                       #endif
  235   1                      Limit_Out(&Ratio,-0.9,0.9);   //限幅
  236   1      }
  237          
  238          void Init_all(void)
  239          {
  240   1              WTST = 0;                                               //���ó������ȴ���������ֵΪ0�ɽ�CPUִ�г��
             -���ٶ�����Ϊ���  
  241   1              DisableGlobalIRQ();                             //�ر����ж�
  242   1              sys_clk = 35000000;                             //����ϵͳƵ��Ϊ35MHz
  243   1      
C251 COMPILER V5.60.0,  main                                                               24/03/24  22:24:58  PAGE 5   

  244   1      //��ʼ���Ĵ���
  245   1              board_init();                                   
  246   1      
  247   1      ////编码器方向引脚初始化
  248   1              gpio_mode(P5_3, GPIO);          
  249   1              gpio_mode(P3_5, GPIO);  
  250   1              
  251   1      ////按键引脚初始化
  252   1              Key_Init();
  253   1              
  254   1      ////测距模块初始化
  255   1              //gpio_mode(P3_2, GPIO);
  256   1         vl53l0x_init();
  257   1              
  258   1      ////OLED初始化
  259   1              ui_init();                                      
  260   1              
  261   1      ////MPU6050初始化
  262   1              MPU6050_DMP_Init();     
  263   1      //      
  264   1      ////定时器初始化
  265   1              pit_timer_ms(TIM_4, 10);                //10ms定时器
  266   1      //      
  267   1      ////编码器初始化
  268   1              ctimer_count_init(CTIM0_P34);   //编码器1计数
  269   1              ctimer_count_init(CTIM3_P04);   //编码器2计数
  270   1              
  271   1      ////电机初始化
  272   1              Motor_Init();
  273   1              
  274   1      ////蜂鸣器初始化
  275   1               Buzzer_Init();
  276   1              
  277   1      ////初始化所有AD引脚
  278   1              ADC_InitAll(); 
  279   1              
  280   1      ////pid初始化  PID_Init(结构体, KP, KI, KD, 输出限幅，积分限幅)
  281   1              PID_Init(&Left_Wheel_PID , 20, 0.5, 0, 9000, 2000);
  282   1              PID_Init(&Right_Wheel_PID, 20, 0.5, 0, 9000, 2000);
  283   1              PID_Init(&Turn_PID , -2, 0, 0 ,10000, 0);
  284   1              
  285   1      //      PID_Incremental_Init();
  286   1              
  287   1      } 
  288          
  289          
  290          
  291          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1275     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        68     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
C251 COMPILER V5.60.0,  main                                                               24/03/24  22:24:58  PAGE 6   

  hconst size          =       114     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
