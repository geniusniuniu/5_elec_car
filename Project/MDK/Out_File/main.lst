C251 COMPILER V5.60.0,  main                                                               28/02/24  20:21:36  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Out_File\main.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\USER\src\main.c XSMALL INTR2 WARNINGLEVEL(3) B
                    -ROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..
                    -\USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\main.lst) OBJECT(.\Out_File\main.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          #include "Motor.h"
    3          #include "ADC.h"
    4          #include "MPU6050.h"
    5          #include "Element.h"
    6          #include "ADC.h"
    7          #include "math.h"
    8          #include "TOF.h"
    9          #include "Buzzer.h"
   10          #include "Key.h"
   11          extern uint16 vl53l0x_distance_mm;
   12          extern uint8 vl53l0x_finsh_flag;
   13          
   14          short gx, gy, gz;
   15          char Isr_flag_10 = 0; 
   16          
   17          float KeyAdjust = 0;
   18          
   19          float Diff,Plus;
   20          float Ratio = 0;
   21          
   22          float Diff_Mid,Plus_Mid;
   23          float Ratio_Mid = 0;
   24          float sum;
   25          int dis = 2000;
   26          
   27          float Exp_Speed_L = 0;
   28          float Exp_Speed_R = 0;
   29          float Exp_Speed = 200;
   30          
   31          uint8 KeyVal;
   32          void Init_all(void);
   33          void Get_Ratio(void);
   34          
   35          void OLED_Printf(void)
   36          {
   37   1              oled_printf_float(0,0,ADC_proc[0],5,2);
   38   1              oled_printf_float(0,2,ADC_proc[1],5,2);
   39   1              oled_printf_float(0,4,ADC_proc[2],5,2);
   40   1              oled_printf_float(0,6,ADC_proc[3],5,2);
   41   1              oled_printf_float(60,0,ADC_proc[4],5,2);
   42   1              
   43   1              oled_printf_float(60,2,vl53l0x_distance_mm,5,2);
   44   1              oled_printf_float(60,4,Ratio,1,2);
   45   1      }
   46          
   47          void main(void) 
   48          {
   49   1              Init_all();
   50   1              EnableGlobalIRQ();      //
   51   1              KeyAdjust = -180;
   52   1              while(1)
   53   1              {
   54   2                      OLED_Printf();
   55   2      //              printf("%.2f,%.2f,%.2f,%.2f,%.2f\r\n",Exp_Speed_L,Exp_Speed_R,Speed_L,Speed_R,Turn_PID.PID_Out*0.09);
   56   2      //              printf("%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\r\n",ADC_proc[0],ADC_proc[1],Sum_Angle,sum_L,sum_R,Ratio);
   57   2                      
C251 COMPILER V5.60.0,  main                                                               28/02/24  20:21:36  PAGE 2   

   58   2      /******************************************** 按键读值***********************************************
             -***********************/       
   59   2                      KeyVal = GetKey_Val(0);
   60   2                      if(KeyVal == KEY0_PRES)
   61   2                              KeyAdjust -= 2;
   62   2                      else if(KeyVal == KEY0_PRES)
   63   2                              KeyAdjust += 2;
   64   2                      
   65   2      /******************************************** 类似中断服务处理 **********************************
             -****************************/ 
   66   2                      if(Isr_flag_10 == 1)  
   67   2                      {
   68   3                              ADC_GetValue();
   69   3                              MPU6050_Refresh_DMP();
   70   3                              MPU_Get_Gyroscope(&gx, &gy, &gz);
   71   3                              Get_Ratio();
   72   3                              
   73   3                      /************************************************ 直道弯道判别 **********************************
             -**********/ 
   74   3                              if(Ratio > -0.1 && Ratio < 0.1) //直线
   75   3                              {
   76   4                                      Turn_PID.Kp = -20;
   77   4                                      Turn_PID.Kd = -3.5;
   78   4                                      Left_Wheel_PID.Kp = Right_Wheel_PID.Kp = 20;
   79   4                                      Left_Wheel_PID.Ki = Right_Wheel_PID.Ki = 0.6;
   80   4                                      Exp_Speed = 220;
   81   4                              }
   82   3                              else   // 拐弯
   83   3                              {
   84   4                                      Turn_PID.Kp = KeyAdjust;
   85   4                                      Turn_PID.Kd = -32;
   86   4                                      Left_Wheel_PID.Kp = Right_Wheel_PID.Kp = 28;
   87   4                                      Left_Wheel_PID.Ki = Right_Wheel_PID.Ki = 1.28; //i太大会出现矫正滞后，导致车反方向飘
             -逸
   88   4                                      Exp_Speed = 180;
   89   4                              }
   90   3                              
   91   3                      /************************************************ 避开路障 ****************************************
             -*******/                         
   92   3                              if(Barrier_Flag4 == 0) //确保避障只运行一次
   93   3                              {
   94   4                                      vl53l0x_get_distance();
   95   4                                      if(vl53l0x_finsh_flag)  //一次测距完成
   96   4                                      {
   97   5                                              if (vl53l0x_distance_mm < 600)          //      检测到路障
   98   5                                              {
   99   6                                                      x10_ms = 13;  
  100   6                                                      Barrier_Flag1 = 1;
  101   6                                              }
  102   5                                      }
  103   4                                      Elem_Barrier(gz);
  104   4                              }
  105   3                              
  106   3                      /************************************************ 圆环判别 ****************************************
             -*******/ 
  107   3                              if(ADC_proc[2] > 75 && (ADC_proc[3] > 8 || ADC_proc[1] > 8))    //中间横电感识别圆环
  108   3                              {
  109   4                                      x10_ms = 13; 
  110   4                                      if(ADC_proc[3] > ADC_proc[1])  //判断左右
  111   4                                      {
  112   5                                              circle_flag_R = 1;
  113   5                                              Elem_Circle_R((Speed_L + Speed_R)/2,gz);        
  114   5                                      }
  115   4                                      else if(ADC_proc[3] < ADC_proc[1]) 
  116   4                                      {
  117   5                                              circle_flag_L = 1;
C251 COMPILER V5.60.0,  main                                                               28/02/24  20:21:36  PAGE 3   

  118   5                                              Elem_Circle_L((Speed_L + Speed_R)/2,gz);
  119   5                                      }
  120   4                              }
  121   3                                      
  122   3                      /************************************************ 转向环计算 *************************************
             -*********/                         
  123   3                              PID_Calculate(&Turn_PID,Ratio*100,gz/100); 
  124   3                              Limit_Out(&Turn_PID.PID_Out,-2000,5000);
  125   3                                      
  126   3                      /************************************************ 上下坡道 ****************************************
             -********/ 
  127   3                              Elem_Up_Down(Pitch,gy);         
  128   3                                      
  129   3                      /************************************************ 特殊元素降速 **********************************
             -**********/ 
  130   3                              if( circle_flag_L == 1 || circle_flag_R == 1 || Barrier_Flag2 == 1 || Barrier_Flag1 == 1)  
  131   3                                      Exp_Speed = 160;
  132   3                              Exp_Speed_L = Exp_Speed + Turn_PID.PID_Out*0.09;
  133   3                              Exp_Speed_R = Exp_Speed - Turn_PID.PID_Out*0.09;
  134   3                              
  135   3                              Get_Speed();  //获取车速
  136   3      
  137   3                              PID_Calculate(&Left_Wheel_PID,Exp_Speed_L,Speed_L);//速度环PID计算
  138   3                              PID_Calculate(&Right_Wheel_PID,Exp_Speed_R,Speed_R);
  139   3                              
  140   3                 /********************************************* 驶离赛道，停车 ********************************
             -*************/ 
  141   3                              if(ADC_proc[2]<5 && Barrier_Executed == 1) 
  142   3                              {
  143   4                                      Left_Wheel_PID.PID_Out = 0;
  144   4                                      Right_Wheel_PID.PID_Out = 0;
  145   4                              }
  146   3                              
  147   3      //                      Left_SetSpeed(Left_Wheel_PID.PID_Out);
  148   3      //                      Right_SetSpeed(Right_Wheel_PID.PID_Out);
  149   3      
  150   3                              Left_SetSpeed(2000);
  151   3                              Right_SetSpeed(-4000);
  152   3                              Isr_flag_10 = 0;
  153   3                      } 
  154   2              }
  155   1      }
  156          
  157          void Init_all(void)
  158          {
  159   1              WTST = 0;                                               //���ó������ȴ���������ֵΪ0�ɽ�CPUִ�г��
             -���ٶ�����Ϊ���  
  160   1              DisableGlobalIRQ();                             //�ر����ж�
  161   1              sys_clk = 35000000;                             //����ϵͳƵ��Ϊ35MHz
  162   1      
  163   1      //��ʼ���Ĵ���
  164   1              board_init();                                   
  165   1      
  166   1      ////编码器方向引脚初始化
  167   1              gpio_mode(P5_3, GPIO);          
  168   1              gpio_mode(P3_5, GPIO);  
  169   1              
  170   1      ////按键引脚初始化
  171   1              Key_Init();
  172   1              
  173   1      ////测距模块初始化
  174   1              //gpio_mode(P3_2, GPIO);
  175   1              vl53l0x_init();
  176   1              
  177   1      ////OLED初始化
  178   1              oled_init();                                    
C251 COMPILER V5.60.0,  main                                                               28/02/24  20:21:36  PAGE 4   

  179   1              
  180   1      ////MPU6050初始化
  181   1              MPU6050_DMP_Init();     
  182   1      //      
  183   1      ////定时器初始化
  184   1              pit_timer_ms(TIM_4, 10);                //10ms定时器
  185   1      //      
  186   1      ////编码器初始化
  187   1              ctimer_count_init(CTIM0_P34);   //编码器1计数
  188   1              ctimer_count_init(CTIM3_P04);   //编码器2计数
  189   1              
  190   1      ////串口初始化
  191   1      //      uart_init(UART_1, UART1_RX_P30, UART1_TX_P31, 115200, TIM_2);
  192   1              
  193   1      ////电机初始化
  194   1              Motor_Init();
  195   1              
  196   1      ////蜂鸣器初始化
  197   1              Buzzer_Init();
  198   1              
  199   1      ////初始化所有AD引脚
  200   1              ADC_InitAll(); 
  201   1              
  202   1      ////pid初始化  PID_Init(结构体, KP, KI, KD, 输出限幅，积分限幅)
  203   1              PID_Init(&Left_Wheel_PID , 20, 0.5, 0, 10000, 2000);
  204   1              PID_Init(&Right_Wheel_PID, 20, 0.5, 0, 10000, 2000);
  205   1              PID_Init(&Turn_PID , -2, 0, 0 ,10000, 0);
  206   1      } 
  207          
  208          //对ADC值进行处理得到差比和
  209          void Get_Ratio(void)
  210          {
  211   1              sum = ADC_proc[0]+ ADC_proc[1]+ADC_proc[4]+ADC_proc[3];
  212   1      //      sum_L = sqrt((ADC_proc[0]*ADC_proc[0]+ADC_proc[1]*ADC_proc[1]));
  213   1      //      sum_R = sqrt((ADC_proc[2]*ADC_proc[2]+ADC_proc[3]*ADC_proc[3]));
  214   1      
  215   1              Diff = ADC_proc[0] - ADC_proc[4];
  216   1              Plus = ADC_proc[0] + ADC_proc[4];
  217   1              
  218   1              Diff_Mid = ADC_proc[1] - ADC_proc[3];
  219   1              Plus_Mid = ADC_proc[1] + ADC_proc[3];
  220   1              
  221   1              if(sum > 20)  //边界保护
  222   1              {
  223   2                      Ratio = Diff/Plus;
  224   2                      Ratio_Mid = Diff_Mid/Plus_Mid;
  225   2                      if(Plus_Mid > 30 && Plus_Mid < 65)
  226   2                      {
  227   3                              Ratio = Ratio_Mid;
  228   3                      }
  229   2              }
  230   1      
  231   1      }
  232          
  233          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1292     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        54     ------
C251 COMPILER V5.60.0,  main                                                               28/02/24  20:21:36  PAGE 5   

  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        59     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
